#include <iostream>
#include <limits>
#include <string>
#include <iomanip>

// Function to clear the input buffer
void clearInputBuffer() {
    std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
}

// Function to get a valid number input from the user
double getValidNumber() {
    double number;
    while (true) {
        std::cout << "Enter a number: ";
        std::cin >> number;

        if (std::cin.fail()) {
            std::cin.clear();
            clearInputBuffer();
            std::cout << "Invalid input. Please enter a valid number." << std::endl;
        } else {
            break;
        }
    }
    return number;
}

// Function to add two numbers
double add(double a, double b) {
    return a + b;
}

// Function to subtract two numbers
double subtract(double a, double b) {
    return a - b;
}

// Function to multiply two numbers
double multiply(double a, double b) {
    return a * b;
}

// Function to divide two numbers (with error handling for division by zero)
double divide(double a, double b) {
    if (b == 0) {
        std::cout << "Error! Division by zero is not allowed." << std::endl;
        return std::numeric_limits<double>::quiet_NaN(); // Return "Not a Number" value
    }
    return a / b;
}

// Function to display the menu of operations
void displayMenu() {
    std::cout << "\nCalculator Menu:" << std::endl;
    std::cout << "1. Addition (+)" << std::endl;
    std::cout << "2. Subtraction (-)" << std::endl;
    std::cout << "3. Multiplication (*)" << std::endl;
    std::cout << "4. Division (/)" << std::endl;
    std::cout << "5. Exit" << std::endl;
    std::cout << "Please choose an operation (1-5): ";
}

// Function to perform the chosen operation
void performOperation(int choice) {
    double num1, num2, result;

    switch (choice) {
        case 1:
            num1 = getValidNumber();
            num2 = getValidNumber();
            result = add(num1, num2);
            std::cout << "Result: " << num1 << " + " << num2 << " = " << result << std::endl;
            break;
        case 2:
            num1 = getValidNumber();
            num2 = getValidNumber();
            result = subtract(num1, num2);
            std::cout << "Result: " << num1 << " - " << num2 << " = " << result << std::endl;
            break;
        case 3:
            num1 = getValidNumber();
            num2 = getValidNumber();
            result = multiply(num1, num2);
            std::cout << "Result: " << num1 << " * " << num2 << " = " << result << std::endl;
            break;
        case 4:
            num1 = getValidNumber();
            num2 = getValidNumber();
            result = divide(num1, num2);
            if (num2 != 0) {
                std::cout << "Result: " << num1 << " / " << num2 << " = " << result << std::endl;
            }
            break;
        case 5:
            std::cout << "Exiting the calculator. Goodbye!" << std::endl;
            break;
        default:
            std::cout << "Invalid choice. Please choose a valid operation (1-5)." << std::endl;
            break;
    }
}

// Function to handle the main calculator loop
void calculatorLoop() {
    int choice;

    while (true) {
        displayMenu(); // Display the menu of operations
        std::cin >> choice;

        // Validate input for menu selection
        while (std::cin.fail() || choice < 1 || choice > 5) {
            std::cin.clear();
            clearInputBuffer();
            std::cout << "Invalid input! Please select a valid option between 1 and 5." << std::endl;
            displayMenu();
            std::cin >> choice;
        }

        if (choice == 5) {
            break; // Exit the loop if the user selects '5' to exit
        }

        performOperation(choice); // Perform the chosen operation
    }
}

int main() {
    // Display a welcome message
    std::cout << "********************************************" << std::endl;
    std::cout << "* Welcome to the C++ Calculator Program! *" << std::endl;
    std::cout << "********************************************" << std::endl;

    // Start the calculator loop
    calculatorLoop();

    return 0;
}
