#include <iostream>
#include <vector>
#include <limits>
#include <string>

// Function to clear the input buffer
void clearInputBuffer() {
    std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
}

// Function to initialize the game board
void initializeBoard(std::vector<std::vector<char>>& board) {
    for (int i = 0; i < 3; i++) {
        for (int j = 0; j < 3; j++) {
            board[i][j] = ' ';
        }
    }
}

// Function to display the game board
void displayBoard(const std::vector<std::vector<char>>& board) {
    std::cout << "\n";
    std::cout << "  0   1   2\n";
    for (int i = 0; i < 3; i++) {
        std::cout << i;
        for (int j = 0; j < 3; j++) {
            std::cout << " " << board[i][j];
            if (j < 2) std::cout << " |";
        }
        std::cout << "\n";
        if (i < 2) std::cout << " ---|---|---\n";
    }
    std::cout << "\n";
}

// Function to check if a player has won
bool checkWin(const std::vector<std::vector<char>>& board, char player) {
    // Check rows and columns
    for (int i = 0; i < 3; i++) {
        if ((board[i][0] == player && board[i][1] == player && board[i][2] == player) || 
            (board[0][i] == player && board[1][i] == player && board[2][i] == player)) {
            return true;
        }
    }

    // Check diagonals
    if ((board[0][0] == player && board[1][1] == player && board[2][2] == player) ||
        (board[0][2] == player && board[1][1] == player && board[2][0] == player)) {
        return true;
    }

    return false;
}

// Function to check if the board is full (draw)
bool checkDraw(const std::vector<std::vector<char>>& board) {
    for (int i = 0; i < 3; i++) {
        for (int j = 0; j < 3; j++) {
            if (board[i][j] == ' ') {
                return false;
            }
        }
    }
    return true;
}

// Function to check if the player's move is valid
bool isValidMove(const std::vector<std::vector<char>>& board, int row, int col) {
    if (row < 0 || row >= 3 || col < 0 || col >= 3 || board[row][col] != ' ') {
        return false;
    }
    return true;
}

// Function to switch players
char switchPlayer(char currentPlayer) {
    return (currentPlayer == 'X') ? 'O' : 'X';
}

// Function to play the game
void playGame() {
    std::vector<std::vector<char>> board(3, std::vector<char>(3, ' '));
    char currentPlayer = 'X';
    int row, col;

    while (true) {
        displayBoard(board);
        std::cout << "Player " << currentPlayer << ", it's your turn." << std::endl;

        // Input validation for the move
        while (true) {
            std::cout << "Enter row and column (0-2): ";
            std::cin >> row >> col;
            clearInputBuffer();

            if (isValidMove(board, row, col)) {
                break;
            } else {
                std::cout << "Invalid move! Please enter a valid row and column (0-2) that is not already occupied." << std::endl;
            }
        }

        // Update the board with the player's move
        board[row][col] = currentPlayer;

        // Check if the current player has won
        if (checkWin(board, currentPlayer)) {
            displayBoard(board);
            std::cout << "Player " << currentPlayer << " wins!" << std::endl;
            break;
        }

        // Check if the game is a draw
        if (checkDraw(board)) {
            displayBoard(board);
            std::cout << "The game is a draw!" << std::endl;
            break;
        }

        // Switch to the other player
        currentPlayer = switchPlayer(currentPlayer);
    }
}

// Function to ask if the players want to play again
bool playAgain() {
    std::string response;
    std::cout << "Do you want to play again? (y/n): ";
    std::cin >> response;
    clearInputBuffer();
    return (response == "y" || response == "Y");
}

int main() {
    std::cout << "******************************************" << std::endl;
    std::cout << "* Welcome to the Tic-Tac-Toe Game!      *" << std::endl;
    std::cout << "* Two players take turns to play.       *" << std::endl;
    std::cout << "* Player X goes first.                  *" << std::endl;
    std::cout << "******************************************" << std::endl;

    do {
        playGame();
    } while (playAgain());

    std::cout << "Thanks for playing! Goodbye!" << std::endl;

    return 0;
}
